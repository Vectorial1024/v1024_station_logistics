<?xml version="1.0" encoding="utf-8" ?>
<mdscript name="V1024_StationLogistics" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="md.xsd">
    <cues>
        <!-- Sets up the global logistics network lookup table -->
        <cue name="StationLogistics_SettingUp" instantiate="true">
            <conditions>
                <event_cue_signalled cue="md.Setup.Start" />
            </conditions>
            <actions>
                <do_if value="not (global.$stationLogisticsNetwork?)" comment="Ensures the station logistics network graph exists">
                    <show_help position="1" duration="6s" custom="'V1024 Station Logistics: starting up.'" chance="0"/>
                    <set_value name="global.$stationLogisticsNetwork" exact="table[]" />
                </do_if>

                <!-- Pretty much nothing else to setup... The way this mod works, it mostly relies on user input to populate the graph. -->
                <set_value name="global.$stationLogisticsNetwork_PickedStation" exact="null" comment="This is only expected to work as a global temp-var for setting up links." />
            </actions>
        </cue>
        <!--
            So, how about handling the potential destruction of stations? Destroyed stations should not appear in our logistics network.
            For simplicity, we will only recheck station validity when the user wants to update the logistics network.
        -->
        <cue name="AddLogisticsNetworkInteractionActions" instantiate="true">
            <conditions>
                <event_cue_signalled cue="md.Interact_Menu_API.Get_Actions" />
            </conditions>
            <actions>
                <show_help position="1" duration="6s" custom="'event.param' + event.param" chance="0"/>
                <set_value name="$target" exact="event.param.$object"/>
                <do_if value="$target.isplayerowned and $target.isclass.station">
                    <!-- Depending on the global station picker state, show the appropriate buttons. -->
                    <do_if value="global.$stationLogisticsNetwork_PickedStation == null">
                        <!-- Creating a new link from scratch. -->
                        <signal_cue_instantly
                            cue="md.Interact_Menu_API.Add_Action"
                            param = "table[
                            $id         = 'lognet_pickstation',
                            $section    = 'interaction',
                            $text       = 'Logistics Network: Pick %s'.[$target.name],
                            $mouseover  = 'Pick %s; remember to also pick another station to pair/unpair logistics links.'.[$target.name],
                            $callback   = NetworkPickStation,
                            ]"/>
                    </do_if>
                    <do_else>
                        <!-- Finalizing link creation state. -->
                        <signal_cue_instantly
                            cue="md.Interact_Menu_API.Add_Action"
                            param = "table[
                            $id         = 'lognet_cancelpick',
                            $section    = 'interaction',
                            $text       = 'Logistics Network: Cancel pick',
                            $mouseover  = 'Cancel logistics link pairing/unpairing and releases the pick on %s.'.[global.$stationLogisticsNetwork_PickedStation.name]
                            $callback   = NetworkCancelPickStation,
                            ]"/>
                        <do_if value="$target != global.$stationLogisticsNetwork_PickedStation">
                            <!-- Basic requirement: no self-looping logistics links allowed! -->
                            <signal_cue_instantly
                                cue="md.Interact_Menu_API.Add_Action"
                                param = "table[
                                $id         = 'lognet_pair',
                                $section    = 'interaction',
                                $text       = 'Logistics Network: Pair with %s'.[global.$stationLogisticsNetwork_PickedStation.name],
                                $mouseover  = 'Pair %s and %s, forming a new bi-directional logistics link if it does not exist yet.'.[global.$stationLogisticsNetwork_PickedStation.name, $target.name],
                                $callback   = NetworkPairStations,
                                ]"/>
                            <signal_cue_instantly
                                cue="md.Interact_Menu_API.Add_Action"
                                param = "table[
                                $id         = 'lognet_unpair',
                                $section    = 'interaction',
                                $text       = 'Logistics Network: Unpair with %s'.[global.$stationLogisticsNetwork_PickedStation.name],
                                $mouseover  = 'Unpair %s and %s, removing the bi-directional logistics link if it currently exists.'.[global.$stationLogisticsNetwork_PickedStation.name, $target.name],
                                $callback   = NetworkUnpairStations,
                                ]"/>
                        </do_if>
                    </do_else>
                    <!-- TODO what if want to unlink station from the logistics network? -->
                </do_if>
            </actions>
        </cue>
        <!--
            Important note:
            X4 Foundations does not allow direct interactions between stations. We're not gonna change that because it would be tedious and prone to break.
            Instead, we workaround that by letting users right click on the stations two times to form the "edge", and then directly pass that "edge" into the network logic.
        -->
        <cue name="NetworkPickStation" instantiate="true" namespace="this">
            <conditions>
                <event_cue_signalled/>
            </conditions>
            <actions>
                <set_value name="global.$stationLogisticsNetwork_PickedStation" exact="event.param.$object" />
                <speak actor="player.computer" priority="-30">
                    <text line="2029" comment="Station" />
                    <text line="2005" comment="Added" />
                </speak>
            </actions>
        </cue>
        <cue name="NetworkCancelPickStation" instantiate="true" namespace="this">
            <conditions>
                <event_cue_signalled/>
            </conditions>
            <actions>
                <set_value name="global.$stationLogisticsNetwork_PickedStation" exact="null" />
                <speak actor="player.computer" line="135" priority="-30" comment="Cancelled" />
            </actions>
        </cue>
        <cue name="NetworkPairStations" instantiate="true" namespace="this">
            <conditions>
                <event_cue_signalled/>
            </conditions>
            <actions>
                <!-- Make a copy of the picked station first -->
                <set_value name="$station1" exact="global.$stationLogisticsNetwork_PickedStation" />
                <set_value name="$station2" exact="event.param.$object" />
                <!-- Send to dedicated handler cue -->
                <signal_cue_instantly cue="HandleNetworkPairStations" param="[$station1, $station2]" param2="$station2" />
                <!-- Then reset the picker state. -->
                <set_value name="global.$stationLogisticsNetwork_PickedStation" exact="null" />
            </actions>
        </cue>
        <cue name="NetworkUnpairStations" instantiate="true" namespace="this">
            <conditions>
                <event_cue_signalled/>
            </conditions>
            <actions>
                <!-- Make a copy of the picked station first -->
                <set_value name="$station1" exact="global.$stationLogisticsNetwork_PickedStation" />
                <set_value name="$station2" exact="event.param.$object" />
                <!-- Send to dedicated handler cue -->
                <signal_cue_instantly cue="HandleNetworkUnpairStations" param="[$station1, $station2]" param2="$station2" />
                <!-- Then reset the picker state. -->
                <set_value name="global.$stationLogisticsNetwork_PickedStation" exact="null" />
            </actions>
        </cue>
        <cue name="HandleNetworkPairStations" instantiate="true" namespace="this">
            <conditions>
                <event_cue_signalled/>
            </conditions>
            <actions>
                <set_value name="$station1" exact="@event.param.{1}" />
                <set_value name="$station2" exact="@event.param.{2}" />
                <!-- Edge-adding started; reset the picker state. -->
                <set_value name="global.$stationLogisticsNetwork_PickedStation" exact="null" />
                <!-- Check the stuff. -->
                <show_help position="1" duration="6s" custom="'NetworkPairStations: ' + $station1.knownname + ', ' + $station2.knownname" chance="0"/>
                <set_value name="$isOK" exact="true" />
                <!-- Check station1 -->
                <do_if value="not ($station1.exists and $station1.isplayerowned and $station1.isclass.station and $station1.isoperational)">
                    <set_value name="$isOK" exact="false" />
                </do_if>
                <!-- Check station2 -->
                <do_if value="not ($station2.exists and $station2.isplayerowned and $station2.isclass.station and $station2.isoperational)">
                    <set_value name="$isOK" exact="false" />
                </do_if>
                <!-- Check self-loop -->
                <do_if value="$station1 == $station2">
                    <set_value name="$isOK" exact="false" />
                </do_if>
                <do_if value="$isOK">
                    <!-- Add to the global network -->
                    <!-- Edges are bi-directional -->
                    <!-- Add conservatively -->
                    <do_if value="not global.$stationLogisticsNetwork.{$station1}?">
                        <set_value name="global.$stationLogisticsNetwork.{$station1}" exact="table[]" />
                    </do_if>
                    <set_value name="global.$stationLogisticsNetwork.{$station1}.{$station2}" exact="true" />
                    <do_if value="not global.$stationLogisticsNetwork.{$station2}?">
                        <set_value name="global.$stationLogisticsNetwork.{$station2}" exact="table[]" />
                    </do_if>
                    <set_value name="global.$stationLogisticsNetwork.{$station2}.{$station1}" exact="true" />
                    <speak actor="player.computer" priority="-30">
                        <!-- 
                            In case for Betty, you can tell her to speak other supported lines by specifying the page number.
                        <text page="20102" line="1051" comment="Trading station" />
                        -->
                        <text line="132" comment="Command accepted." />
                        <text line="27" comment="Connection established." />
                    </speak>
                </do_if>
                <do_else>
                    <speak actor="player.computer" line="133" priority="-30" comment="Command rejected." />
                </do_else>
            </actions>
        </cue>
        <cue name="HandleNetworkUnpairStations" instantiate="true" namespace="this">
            <conditions>
                <event_cue_signalled/>
            </conditions>
            <actions>
                <set_value name="$station1" exact="@event.param.{1}" />
                <set_value name="$station2" exact="@event.param.{2}" />
                <!-- Check the stuff. -->
                <do_if value="$station1 != $station2" comment="require non-self-loop">
                    <!-- Remove s1 to s2 -->
                    <remove_value name="@global.$stationLogisticsNetwork.{$station1}.{$station2}" />
                    <!-- Remove s2 to s1 -->
                    <remove_value name="@global.$stationLogisticsNetwork.{$station2}.{$station1}" />
                    <!-- Done! -->
                    <speak actor="player.computer" priority="-30">
                        <!-- 
                            In case for Betty, you can tell her to speak other supported lines by specifying the page number.
                        <text page="20102" line="1051" comment="Trading station" />
                        -->
                        <text line="132" comment="Command accepted." />
                        <text line="28" comment="Connection lost." />
                    </speak>
                    <!-- Print a custom notification, in case the user clicked wrong -->
                    <!-- Just show a simple description; the user is supposed to roughly know what they are doing. -->
                    <show_help position="1" duration="6s" custom="'Stations unpaired:\n- ' + $station1.knownname + '\n- ' + $station2.knownname" />
                </do_if>
                <do_else>
                    <speak actor="player.computer" line="133" priority="-30" comment="Command rejected." />
                </do_else>
            </actions>
        </cue>
    </cues>
</mdscript>
