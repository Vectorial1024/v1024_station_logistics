<?xml version="1.0" encoding="utf-8" ?>
<mdscript name="V1024_StationLogistics" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="md.xsd">
    <cues>
        <!-- Sets up the global logistics network lookup table -->
        <cue name="StationLogistics_SettingUp" instantiate="true">
            <conditions>
                <event_cue_signalled cue="md.Setup.Start" />
            </conditions>
            <actions>
                <do_if value="not (global.$statLogNet?)" comment="Ensures the station logistics network graph exists">
                    <show_help position="1" duration="6s" custom="'V1024 Station Logistics: starting up.'" chance="0"/>
                    <set_value name="global.$statLogNet" exact="table[]" />
                </do_if>

                <!-- Pretty much nothing else to setup... The way this mod works, it mostly relies on user input to populate the graph. -->
                <set_value name="global.$statLogNet_PickedStation" exact="null" comment="This is only expected to work as a global temp-var for setting up links." />
            </actions>
        </cue>
        <!--
            So, how about handling the potential destruction of stations? Destroyed stations should not appear in our logistics network.
            For simplicity, we will only recheck station validity when the user wants to update the logistics network.
        -->
        <cue name="AddLogisticsNetworkInteractionActions" instantiate="true">
            <conditions>
                <event_cue_signalled cue="md.Interact_Menu_API.Get_Actions" />
            </conditions>
            <actions>
                <show_help position="1" duration="6s" custom="'event.param' + event.param" chance="0"/>
                <set_value name="$target" exact="event.param.$object"/>
                <do_if value="$target.isplayerowned and $target.isclass.station">
                    <!-- Depending on the global station picker state, show the appropriate buttons. -->
                    <do_if value="global.$statLogNet_PickedStation == null">
                        <!-- Creating a new link from scratch. -->
                        <signal_cue_instantly
                            cue="md.Interact_Menu_API.Add_Action"
                            param = "table[
                            $id         = 'lognet_pickstation',
                            $section    = 'interaction',
                            $text       = {231024, 1001}.[$target.name],
                            $mouseover  = {231024, 1002}.[$target.name],
                            $callback   = NetworkPickStation,
                            ]"/>
                        <!-- Review the existing links -->
                        <signal_cue_instantly
                            cue="md.Interact_Menu_API.Add_Action"
                            param = "table[
                            $id         = 'lognet_showedges',
                            $section    = 'interaction',
                            $text       = {231024, 1401},
                            $mouseover  = {231024, 1402}.[$target.name],
                            $callback   = NetworkShowEdges,
                            ]"/>
                    </do_if>
                    <do_else>
                        <!-- Finalizing link creation state. -->
                        <signal_cue_instantly
                            cue="md.Interact_Menu_API.Add_Action"
                            param = "table[
                            $id         = 'lognet_cancelpick',
                            $section    = 'interaction',
                            $text       = {231024, 1101},
                            $mouseover  = {231024, 1102}.[global.$statLogNet_PickedStation.name],
                            $callback   = NetworkCancelPickStation,
                            ]"/>
                        <do_if value="$target != global.$statLogNet_PickedStation">
                            <!-- Basic requirement: no self-looping logistics links allowed! -->
                            <do_if value="global.$statLogNet.{global.$statLogNet_PickedStation}? and global.$statLogNet.{global.$statLogNet_PickedStation}.{$target}?">
                                <!-- link exists; propose removing the link -->
                                <signal_cue_instantly
                                    cue="md.Interact_Menu_API.Add_Action"
                                    param = "table[
                                    $id         = 'lognet_unpair',
                                    $section    = 'interaction',
                                    $text       = {231024, 1201}.[global.$statLogNet_PickedStation.name],
                                    $mouseover  = {231024, 1202}.[global.$statLogNet_PickedStation.name, $target.name],
                                    $callback   = NetworkUnpairStations,
                                    ]"/>
                            </do_if>
                            <do_else>
                                <!-- link does not exist; propose adding the link -->
                                <signal_cue_instantly
                                    cue="md.Interact_Menu_API.Add_Action"
                                    param = "table[
                                    $id         = 'lognet_pair',
                                    $section    = 'interaction',
                                    $text       = {231024, 1301}.[global.$statLogNet_PickedStation.name],
                                    $mouseover  = {231024, 1302}.[global.$statLogNet_PickedStation.name, $target.name],
                                    $callback   = NetworkPairStations,
                                    ]"/>
                            </do_else>
                        </do_if>
                    </do_else>
                    <!-- TODO what if want to unlink station from the logistics network? -->
                </do_if>
            </actions>
        </cue>
        <!--
            Important note:
            X4 Foundations does not allow direct interactions between stations. We're not gonna change that because it would be tedious and prone to break.
            Instead, we workaround that by letting users right click on the stations two times to form the "edge", and then directly pass that "edge" into the network logic.
        -->
        <cue name="NetworkPickStation" instantiate="true" namespace="this">
            <conditions>
                <event_cue_signalled/>
            </conditions>
            <actions>
                <set_value name="global.$statLogNet_PickedStation" exact="event.param.$object" />
                <speak actor="player.computer" priority="-30">
                    <text line="2029" comment="Station" />
                    <text line="2005" comment="Added" />
                </speak>
            </actions>
        </cue>
        <cue name="NetworkCancelPickStation" instantiate="true" namespace="this">
            <conditions>
                <event_cue_signalled/>
            </conditions>
            <actions>
                <set_value name="global.$statLogNet_PickedStation" exact="null" />
                <speak actor="player.computer" line="135" priority="-30" comment="Cancelled" />
            </actions>
        </cue>
        <cue name="NetworkPairStations" instantiate="true" namespace="this">
            <conditions>
                <event_cue_signalled/>
            </conditions>
            <actions>
                <!-- Make a copy of the picked station first -->
                <set_value name="$station1" exact="global.$statLogNet_PickedStation" />
                <set_value name="$station2" exact="event.param.$object" />
                <!-- Send to dedicated handler cue -->
                <signal_cue_instantly cue="HandleNetworkPairStations" param="[$station1, $station2]" />
                <!-- Then reset the picker state. -->
                <set_value name="global.$statLogNet_PickedStation" exact="null" />
            </actions>
        </cue>
        <cue name="NetworkUnpairStations" instantiate="true" namespace="this">
            <conditions>
                <event_cue_signalled/>
            </conditions>
            <actions>
                <!-- Make a copy of the picked station first -->
                <set_value name="$station1" exact="global.$statLogNet_PickedStation" />
                <set_value name="$station2" exact="event.param.$object" />
                <!-- Send to dedicated handler cue -->
                <signal_cue_instantly cue="HandleNetworkUnpairStations" param="[$station1, $station2]" />
                <!-- Then reset the picker state. -->
                <set_value name="global.$statLogNet_PickedStation" exact="null" />
            </actions>
        </cue>
        <cue name="NetworkRemoveStation" instantiate="true" namespace="this">
            <conditions>
                <event_cue_signalled/>
            </conditions>
            <actions>
                <set_value name="$theStation" exact="event.param.$object" />
                <!-- Send to dedicated handler cue -->
                <signal_cue_instantly cue="HandleNetworkRemoveStation" param="[$theStation]" />
            </actions>
        </cue>
        <cue name="NetworkShowEdges" instantiate="true" namespace="this">
            <conditions>
                <event_cue_signalled/>
            </conditions>
            <actions>
                <!-- Make a copy of the queried station first -->
                <set_value name="$queryStation" exact="event.param.$object" />
                <!-- Send to dedicated handler cue -->
                <signal_cue_instantly cue="HandleNetworkShowEdges" param="[$queryStation]" />
            </actions>
        </cue>
        <cue name="HandleNetworkPairStations" instantiate="true" namespace="this">
            <conditions>
                <event_cue_signalled/>
            </conditions>
            <actions>
                <set_value name="$station1" exact="@event.param.{1}" />
                <set_value name="$station2" exact="@event.param.{2}" />
                <!-- Edge-adding started; reset the picker state. -->
                <set_value name="global.$statLogNet_PickedStation" exact="null" />
                <!-- Check the stuff. -->
                <show_help position="1" duration="6s" custom="'NetworkPairStations: ' + $station1.knownname + ', ' + $station2.knownname" chance="0"/>
                <set_value name="$isOK" exact="true" />
                <!-- Check general -->
                <do_if value="$station1 == null or $station2 == null">
                    <set_value name="$isOK" exact="false" />
                </do_if>
                <!-- Check station1 -->
                <do_if value="not ($station1.exists and $station1.isplayerowned and $station1.isclass.station and $station1.isoperational)">
                    <set_value name="$isOK" exact="false" />
                </do_if>
                <!-- Check station2 -->
                <do_if value="not ($station2.exists and $station2.isplayerowned and $station2.isclass.station and $station2.isoperational)">
                    <set_value name="$isOK" exact="false" />
                </do_if>
                <!-- Check self-loop -->
                <do_if value="$station1 == $station2">
                    <set_value name="$isOK" exact="false" />
                </do_if>
                <do_if value="$isOK">
                    <!-- Add to the global network -->
                    <!-- Edges are bi-directional -->
                    <!-- Add conservatively -->
                    <do_if value="not global.$statLogNet.{$station1}?">
                        <set_value name="global.$statLogNet.{$station1}" exact="table[]" />
                    </do_if>
                    <set_value name="global.$statLogNet.{$station1}.{$station2}" exact="true" />
                    <add_to_group groupname="global.$staitonLogisticsNetworkTrackedGroup" object="$station1" />
                    <do_if value="not global.$statLogNet.{$station2}?">
                        <set_value name="global.$statLogNet.{$station2}" exact="table[]" />
                    </do_if>
                    <set_value name="global.$statLogNet.{$station2}.{$station1}" exact="true" />
                    <add_to_group groupname="global.$staitonLogisticsNetworkTrackedGroup" object="$station2" />
                    <speak actor="player.computer" priority="-30">
                        <!-- 
                            In case for Betty, you can tell her to speak other supported lines by specifying the page number.
                        <text page="20102" line="1051" comment="Trading station" />
                        -->
                        <text line="132" comment="Command accepted." />
                        <text line="27" comment="Connection established." />
                    </speak>
                </do_if>
                <do_else>
                    <speak actor="player.computer" line="133" priority="-30" comment="Command rejected." />
                </do_else>
            </actions>
        </cue>
        <cue name="HandleNetworkUnpairStations" instantiate="true" namespace="this">
            <conditions>
                <event_cue_signalled/>
            </conditions>
            <actions>
                <set_value name="$station1" exact="@event.param.{1}" />
                <set_value name="$station2" exact="@event.param.{2}" />
                <!-- Check the stuff. -->
                <do_if value="$station1 != null and $station2 != null and $station1 != $station2" comment="require non-self-loop">
                    <!-- Remove s1 to s2 -->
                    <show_help position="1" duration="2s" custom="global.$statLogNet + '     ' + global.$statLogNet.{$station1}?" chance="0" />
                    <do_if value="global.$statLogNet.{$station1}?">
                        <remove_value name="global.$statLogNet.{$station1}.{$station2}" />
                        <do_if value="global.$statLogNet.{$station1} == table[]" comment="Remove root entry when no leaf entries">
                            <remove_value name="global.$statLogNet.{$station1}" />
                        </do_if>
                    </do_if>
                    <!-- Remove s2 to s1 -->
                    <show_help position="1" duration="2s" custom="global.$statLogNet + '     ' + global.$statLogNet.{$station2}?" chance="0" />
                    <do_if value="global.$statLogNet.{$station2}?">
                        <remove_value name="global.$statLogNet.{$station2}.{$station1}" />
                        <do_if value="global.$statLogNet.{$station2} == table[]" comment="Remove root entry when no leaf entries">
                            <remove_value name="global.$statLogNet.{$station2}" />
                        </do_if>
                    </do_if>
                    <!-- Done! -->
                    <speak actor="player.computer" priority="-30">
                        <!-- 
                            In case for Betty, you can tell her to speak other supported lines by specifying the page number.
                        <text page="20102" line="1051" comment="Trading station" />
                        -->
                        <text line="132" comment="Command accepted." />
                        <text line="28" comment="Connection lost." />
                    </speak>
                    <!-- Print a custom notification, in case the user clicked wrong -->
                    <!-- Just show a simple description; the user is supposed to roughly know what they are doing. -->
                    <show_help position="1" duration="6s" custom="{231024, 1203}.[$station1.knownname, $station2.knownname]" />
                </do_if>
                <do_else>
                    <speak actor="player.computer" line="133" priority="-30" comment="Command rejected." />
                </do_else>
            </actions>
        </cue>
        <cue name="HandleNetworkRemoveStation" instantiate="true" namespace="this">
            <conditions>
                <event_cue_signalled/>
            </conditions>
            <actions>
                <set_value name="$theStation" exact="@event.param.{1}" />
                <set_value name="$shouldSpeakFull" exact="@event.param.{2}" />
                <!-- Check the stuff. -->
                <do_if value="$theStation != null">
                    <do_if value="global.$statLogNet.{$theStation}?" comment="Ensure we really have something to remove">
                        <!-- Remove others to s1 -->
                        <set_value name="$existingLinksTable" exact="global.$statLogNet.{$theStation}" />
                        <!-- Remove s1 to others -->
                        <remove_value name="global.$statLogNet.{$theStation}" />
                        <remove_from_group group="global.$staitonLogisticsNetworkTrackedGroup" object="$theStation" />
                    </do_if>
                    <!-- Done! -->
                    <!-- Should we speak fully? -->
                    <do_if value="$shouldSpeakFull">
                        <!-- Speak fully -->
                        <speak actor="player.computer" priority="-30">
                            <!-- 
                                In case for Betty, you can tell her to speak other supported lines by specifying the page number.
                            -->
                            <text line="132" comment="Command accepted." />
                            <text page="20102" line="1051" comment="Trading station" />
                            <text line="28" comment="Connection lost." />
                        </speak>
                    </do_if>
                    <do_else>
                        <!-- Speak simply -->
                        <speak actor="player.computer" priority="-30">
                            <!-- 
                                In case for Betty, you can tell her to speak other supported lines by specifying the page number.
                            -->
                            <text page="20102" line="1051" comment="Trading station" />
                            <text line="28" comment="Connection lost." />
                        </speak>
                    </do_else>
                    <!-- Print a custom notification, in case the user clicked wrong -->
                    <!-- Just show a simple description; the user is supposed to roughly know what they are doing. -->
                    <show_help position="1" duration="6s" custom="'Station removed from network:\n- ' + $theStation.knownname" />
                </do_if>
                <do_else>
                    <speak actor="player.computer" line="133" priority="-30" comment="Command rejected." />
                </do_else>
            </actions>
        </cue>
        <cue name="HandleNetworkShowEdges" instantiate="true" namespace="this">
            <conditions>
                <event_cue_signalled/>
            </conditions>
            <actions>
                <set_value name="$queryStation" exact="@event.param.{1}" />
                <!-- Because we have carefully checked for the event types when adding/removing edges, we can "safely" read the edge information. -->
                <create_group groupname="$guidanceGroup" />
                <show_help position="1" duration="2s" custom="'V1024 Station Logistics: showing edges for ' + $queryStation.knownname" chance="0"/>
                <do_if value="@global.$statLogNet.{$queryStation}">
                    <!-- Add everything into the system -->
                    <do_for_each name="$otherStation" in="global.$statLogNet.{$queryStation}">
                        <show_help position="1" duration="2s" custom="'' + $otherStation.knownname" chance="0"/>
                        <add_to_group groupname="$guidanceGroup" object="$otherStation" />
                    </do_for_each>
                </do_if>
                <do_if value="$guidanceGroup.count">
                    <!-- There are item(s). -->
                    <!-- This line is actually a bit inaccurate; best played when scanning ships, but oh well. -->
                    <speak actor="player.computer" line="209" priority="-30" comment="Accessing freight data." />
                    <!-- Use in-game guidance to highlight the stations. -->
                    <signal_cue_instantly cue="md.EdgeReview.NewTarget" param="[$queryStation]"/>
                    <show_help position="1" duration="6s" custom="{231024, 6102}.[$guidanceGroup.count, $queryStation.knownname]" chance="100"/>
                </do_if>
                <do_else>
                    <!-- We got nothing here. Could be no edges or wrong format (eg, you gave us a ship). -->
                    <show_help position="1" duration="6s" custom="{231024, 6101}.[$queryStation.knownname]" chance="100"/>
                    <speak actor="player.computer" line="204" priority="-30" comment="No information available." />
                </do_else>
                <!-- Clean-up -->
                <clear_group group="$guidanceGroup" />
                <remove_value name="$guidanceGroup" />
            </actions>
        </cue>

        <!-- For simplicity, perhaps we should not listen to station-destroyed events to update our graphs. -->
    </cues>
</mdscript>
